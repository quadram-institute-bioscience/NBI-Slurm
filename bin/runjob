#!/usr/bin/env perl
#ABSTRACT: Run a job in the cluster using NBI::Slurm
#PODNAME: runjob

use v5.12;
use warnings;
use Getopt::Long;
use FindBin qw($RealBin);
use Data::Dumper;
use File::Basename;
use File::Spec;
use Term::ANSIColor qw(:constants);
my $BIN = basename($0);
$Data::Dumper::Sortkeys = 1;

if (-e "$RealBin/../dist.ini") {
    say STDERR "[dev mode] Using local lib" if ($ENV{"DEBUG"});
    use lib "$RealBin/../lib";
} 

use NBI::Slurm;
use Cwd;

my $user_home_dir = $ENV{HOME};
my @afterok;
my $user_current_dir = getcwd();
my $username = $ENV{USER};
my $config = NBI::Slurm::load_config("$user_home_dir/.nbislurm.config");
my $version = $NBI::Slurm::VERSION;
my $queue = $config->{'queue'} // 'qib-short,nbi-short';
my $threads = $config->{'threads'} // 1;
my $memory = $config->{'memory'} // 8000;
my $time = $config->{'time'} // "2h";
my $tmpdir = $config->{'tmpdir'} // "/tmp";
my $name;
my $email_address = $config->{'email'} // undef;
my $mail_type = $config->{'email_type'} // "none";
my $command;
my $verbose;
my $debug;
my $run;
GetOptions(
    'm|memory=s'    => \$memory,
    'c|cores|threads=i' => \$threads,
    'q|queue=s'     => \$queue,
    'T|t|time=s'      => \$time,
    'w|tmpdir=s'    => \$tmpdir,
    'n|name=s'      => \$name,
    'r|run'         => \$run,
    'a|email-address=s' => \$email_address,
    'e|mail-type=s' => \$mail_type, # 'BEGIN,END,FAIL,REQUEUE,ALL'
    'after=s'       => \@afterok,
    'verbose'       => \$verbose,
    'version'       => sub { say "runjob v", $NBI::Slurm::VERSION; exit },
    'debug'         => \$debug,
    'help'          => sub { usage(1) },
) or usage(1);

$debug = 1 if ($ENV{"DEBUG"});
# Update queue based on time
my $time_hours = NBI::Opts::_time_to_hour($time);
$queue = update_queue($queue, $time_hours);
$command = join(" ", @ARGV);
usage(1) unless ($command);

if ($verbose) {
    say STDERR YELLOW, BOLD, "PARAMETERS:",RESET;
    say STDERR YELLOW, "Queue:      ", RESET, $queue // "(not set)";
    say STDERR YELLOW, "Memory:     ", RESET, $memory // "(not set)";
    say STDERR YELLOW, "Threads:    ", RESET, $threads // "(not set)";
    say STDERR YELLOW, "Time:       ", RESET, $time // "(not set)";
    say STDERR YELLOW, "Tmpdir:     ", RESET, $tmpdir // "(not set)";
    say STDERR YELLOW, "Name:       ", RESET, $name // "(not set)";
    say STDERR YELLOW, "Command:    ", RESET, $command // "(not set)";
}
# Check threadshours
if (-d $time) {
    say STDERR RED, BOLD, "ERROR:", RESET, " did you mean \"--tmpdir $time\"  instead of $threads threads?";
    usage();
}

# Sanitize tempdir
if (-d $tmpdir) {
    $tmpdir = File::Spec->rel2abs($tmpdir);
} else {
    # Check if it was meant to be a TIME instead
    if ($tmpdir =~/ / or $tmpdir =~/(\d+)[dh]/) {
        say STDERR RED, BOLD, "WARNING:", RESET, " $tmpdir looks like a time string, not a directory!";
    }
    mkdir($tmpdir) or die "Cannot create $tmpdir: $!";
}

# Sanitize memory
if ($memory =~/^(\d+)$/ and $1 < 200) {
    say STDERR RED, BOLD, "WARNING:", RESET, " $memory is in Mb but <200, autoscaling to $memory GB";
    $memory = $1 * 1000;
}
$name = autoname($command) unless (defined $name);

my $afterok_string = defined $afterok[0] ? "-d afterok:" . join(":", @afterok) : undef;

# 
if (not NBI::Slurm::valid_queue($queue)) {
    my @valid_queues = NBI::Slurm::queues('CAN FAIL');
    if (scalar @valid_queues) {
        say STDERR RED, BOLD, "WARNING:", RESET, " $queue is not a valid queue: ", join(", ", @valid_queues); 
    } else {
        if ($run) {
            say STDERR RED, BOLD, "ERROR:", RESET, " You might be outside a slurm cluster. Run without --run to see the script", join(", ", @valid_queues); 
            exit 1;
        } else {
            say STDERR RED, BOLD, "WARNING:", RESET, " You might be outside a slurm cluster", join(", ", @valid_queues); 
        }
        
        
    }
    
}

my $opts = NBI::Opts->new(
    -queue => $queue,
    -threads => $threads,
    -memory => $memory,
    -time   => $time,
    -tmpdir => $tmpdir,
    -email_address => $email_address,
    -email_type => $mail_type,
    -opts => [$afterok_string],
);


if ($verbose) {
    say STDERR GREEN, "CONFIG:\n", RESET;
    xdump($config);
    print STDERR "\n";
    #say STDERR GREEN, "OPTS:\n", RESET;
    say STDERR $opts->view();
}


sub xdump {
    my ($hash_of_hashes, $indent) = @_;
    $indent //= '  ';
    while (my ($key, $value) = each %$hash_of_hashes) {
        if (ref $value eq 'HASH') {
            print STDERR BOLD, "$indent$key :\n", RESET;
            xdump($value, "$indent    ");
            print "$indent\n";
        } else {
            print STDERR "$indent$key = $value\n";
        }
    }
}


# If the command starts with a number, it might be a typo like -t 8h instead
my $job = NBI::Job->new(
    -name => $name,
    -command =>  "cd \"$user_current_dir\"",
    -opts => $opts
);
if ($debug) {
    say STDERR YELLOW, "JOB:\n", RESET, Dumper($job);
}
$job->append_command($command);
if ($verbose and not $run) {
    say STDERR GREEN, "JOB SCRIPT\n", RESET;
    say STDERR $job->script();
}


my $err = 0;
if ($run) {
    
    if (my $j = $job->run()) {
        
        if ($verbose) {
            #say STDERR GREEN, "JOB OBJECT:\n", RESET;
            say STDERR $job->view();
        }

        say "$j";
    } else {
        say STDERR RED, "Job not submitted: $j", RESET;
        if ($verbose) {
            #say STDERR RED, "JOB OBJECT:\n", RESET;
            say STDERR $job->view();
        }
        $err = 1;
    }
} else {
    say STDERR GREEN, "JOB SCRIPT:\n", RESET;
    say $job->script();
}


if ($err) {
    exit 1;
} else {
    say STDERR GREEN, "Job sumbitted: ", $job->jobid, RESET, "\t(", $job->name, ")", RESET;
}
sub usage {
    say STDERR <<END;

 Options:
    -n, --name       Job name [optional]
    -q, --queue      Queue name [default: nbi-short]
    -m, --memory     Memory to use [default: 8Gb]
    -c, --cores      Number of threads [default: 1]
    -T, --time       Time string [default: "0d 8h"]
    --after  INT     Job ID to wait for [can be used multiple times]
    -w, --tmpdir     Temporary directory [default: /tmp]
    -r, --run        Run the job (otherwise, just print the script)
    --verbose        Verbose output
    --help           This help message
 ----------------------------------------------------------
END
    exit() if ($_[0]);
}

sub autoname {
    my $string = shift;
    my @parts = split(/\s+/, $string);
    my @ints = ("bash", "perl", "python", "python3", "R", "Rscript", "sh", "zsh");
    my @subs = ("bwa", "samtools", "seqfu", "seqkit", "bedtools", "taxonkit", "kmcp", "seqtk", "usearch", "vsearch");
    
    # From each @parts, replace it with the first [A-Za-z0-9]+ part
    for my $i (0..$#parts) {
        $parts[$i] =~ /^([A-Za-z0-9]+)/;
        $parts[$i] = $1;
    }
    # check if $fisrt is part of the @int array of strings
    if (grep {$_ eq $parts[0]} @ints and defined $parts[1]) {
        return $parts[1];
    } elsif (grep {$_ eq $parts[0]} @subs and defined $parts[1]) {
        return $parts[0] . "-" . $parts[1];
    } else {
        return $parts[0];
    }

}


sub update_queue {
    my ($queue, $time) = @_;
    # If the queue has a star, it can be updated
    if ($queue !~ /\*/) {
        return $queue;
    }
    # Get time in hours
    my $mock_opt = NBI::Opts->new(-time => $time);
    my $time_h = $mock_opt->hours;
    
    if ($time <= 2 ) {
        # Replace * with short
        $queue =~ s/\*/short/g;
    } elsif ($time_h <= 48) {
        # Replace * with medium
        $queue =~ s/\*/medium/g;
    } else {
        # Replace * with long
        $queue =~ s/\*/long/g;
    }
    return $queue;
}

__END__

=head1 SYNOPSIS

  runjob [options] "Command to run"

=head1 DESCRIPTION

The C<runjob> script allows you to submit a job to the cluster using the NBI::Slurm module. 

It provides a command-line interface for setting the job parameters, including the queue, memory, threads, and execution time.

=head1 OPTIONS

=over 4

=item B<-n, --name> STR

Specifies the name of the job (optional). If not provided, an automatic name will be generated based on the command being run.

=item B<-q, --queue> STR

Specifies the queue name for the job. The default value is "nbi-short".
Note that if you put a "*", it will be replaced by 'short', 'medium', or 'long' depending on the time specified with '--time'.

=item B<-m, --memory> INT (Mb)

Specifies the amount of memory to use for the job. The default value is 8Gb. You can add a suffix like "900Mb" or "12Gb" (floats are not supported).
An integer is interpreted as Mb if > 200, otherwise it is interpreted as Gb.

=item B<-c, --cores, --threads> INT

Specifies the number of threads (cores) to use for the job. The default value is 1.

=item B<-t, --time> STR

Specifies the B<time string> for the job. The default value is "C<0d 8h>". 
The format should be in the format of "C<Xd Xh Xm>" where X represents the number of days (d), hours (h), and minutes (m) respectively.

=item B<--after> INT

Specifies the job ID to wait for before running the job. This option can be used multiple times to specify multiple jobs to wait for.

=item B<-w, --tmpdir> PATH

Specifies the temporary (working) directory for the job. The default value is "/tmp".

=item B<-r, --run>

Runs the job immediately after submitting. If not specified, the script will only print the job script without running it.

=item B<--verbose>

Enables verbose output, displaying additional information about the job and its options.

=item B<--help>

Displays the help message for the script.

=back

=head1 CONFIGURATION

The script will look for a configuration file in the user's home directory at C<~/.nbislurm.config>.

  queue=qib-*,nbi-*
  email=my@address
  tmpdir=/home/user/slurm
  memory=8000
  time=3h



=head1 EXAMPLES

Submitting a job to the default queue with 4Gb memory and running the job:

    runjob -m 4Gb -r "ls -l"

Submitting a job with a custom name, 2 threads, and running a Python script:

    runjob -n "my-job" -c 2 -r "python script.py"

Chaining jobs together:

    JOB1=$(runjob "echo 'Hello, world!'")
    runjob --after $JOB1 "echo 'Goodbye, world!'"